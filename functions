#!/bin/bash
# Login to Azure with Service Principle
function azlogin() {
	az login --service-principal \
		-u $AZ_PERSONAL_CLIENT_ID \
		-p $AZ_PERSONAL_CLIENT_SECRET \
		--tenant $AZ_PERSONAL_TENANT_ID
}
function azvmstart() {
	az vm start -g $AZ_PERSONAL_RG -n $AZ_PERSONAL_VM_NAME
	$(azvmip)
}
function azvmip(){
	az vm list-ip-addresses -g $AZ_PERSONAL_RG -n $AZ_PERSONAL_VM_NAME \
	| jq '.[0].virtualMachine.network.publicIpAddresses[0].ipAddress'
}
function azvmstop() {
	az vm stop --resource-group $AZ_PERSONAL_RG --name $AZ_PERSONAL_VM_NAME
	$(azvmdeallocate)
}
function azvmdeallocate() {
	az vm deallocate -g $AZ_PERSONAL_RG -n $AZ_PERSONAL_VM_NAME
}
# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python3 -c $'import http.server;\nmap = http.server.BaseHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}
function turnOnVENV() {
  if [[ -d .venv ]]; then
    source .venv/bin/activate
  elif [[ -d ../.venv ]]; then
    source ../.venv/bin/activate
  else
    echo "Can't find a venv to source"
  fi
}
#export -f turnOnVENV
function build-venv() {
  if [[ -d .venv ]]; then
    echo "Won't build .venv because it is already exists."
  else
    python3 -m venv .venv && turnOnVENV && [[ -s requirements.txt ]] && python -m pip install -r requirements.txt
  fi
}
function cleanup-venv() {
  if [[ -d .venv ]]; then
    deactivate && rm -rf .venv 
  else
    echo "Can't find a venv to clean"
  fi
}
function awslogin() {
	aws_secret_access_key=$(security find-generic-password -s $1 -a 'aws_secret_access_key' -w)
	aws_access_key_id=$(security find-generic-password -s $1 -a 'aws_access_key_id' -w)
	rm -rf ~/.aws
	mkdir ~/.aws
	cat << EOF > ~/.aws/credentials
[default]
aws_access_key_id=${aws_access_key_id}
aws_secret_access_key=${aws_secret_access_key}
EOF
}
cheat() {
	clear && curl cheat.sh/"$1";
}
function signfile-binary(){
	if [ -v $1 ] || [ -v $2 ]; then
		echo "please provide <file> <email>"
	else
		echo "signing file $1 with key from email $2"
		gpg --sign -u $2 $1
		echo "saved to $1.gpg"
	fi
}
function signfile-text(){
	if [ -v $1 ] || [ -v $2 ]; then
		echo "please provide <file> <email>"
	else
		echo "signing file $1 with key from email $2"
		gpg --detach-sig --armor -u $2 $1
		cat $1.asc
		echo "saved to $1.asc"
	fi
}
function verifyfile(){
	if [ -v $1 ]; then
		echo "please provide signature"
	else
		gpg --verify $1

	fi
}